{
  "name": "customTradingAnalysis",
  "nodes": [
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "success"
            },
            {
              "name": "stockSymbol",
              "value": "={{ $json.query }}"
            },
            {
              "name": "analysisText",
              "value": "={{ $json.text }}"
            },
            {
              "name": "imageData",
              "value": "={{ $json.image_0_data }}"
            },
            {
              "name": "imageMimeType",
              "value": "={{ $json.image_0_mimeType }}"
            }
          ]
        },
        "options": {}
      },
      "name": "4. Format Output",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [
        2992,
        3504
      ],
      "id": "d9f8d48d-d973-4247-ad1c-6fcfe42a28a4"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "name": "5. Respond to Website",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2336,
        2048
      ],
      "id": "2681903f-940c-46d9-bafc-d81439f12f31"
    },
    {
      "parameters": {
        "jsCode": "// Safely get the incoming JSON body from the webhook\nconst webhookBody = $json.body;\n\n// Safely extract the symbol and interval properties sent directly from the frontend\nlet symbol = webhookBody?.symbol || \"\";\nlet interval = webhookBody?.interval || \"\";\n\n// Basic validation: Check if both required values are present\nif (!symbol || !interval) {\n    throw new Error(`Missing stock information. Symbol: ${symbol || 'N/A'}, Interval: ${interval || 'N/A'}`);\n}\n\n// Ensure the symbol is capitalized and any extra text is removed (optional cleanup)\nsymbol = symbol.toUpperCase().split(\" \")[0].trim();\ninterval = interval.toUpperCase().trim();\n\n// Return the cleaned-up symbol and interval for the next nodes (like an LLM or Stock Data node)\nreturn [\n    {\n        json: {\n            symbol: symbol,\n            interval: interval\n        }\n    }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        320,
        2080
      ],
      "id": "46276fd8-7d78-4342-911f-a965390aec01",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "// --- Helper function to clean up symbol strings ---\nfunction normalizeSymbol(s) {\n  if (!s) return null;\n  return String(s)\n    .toUpperCase()\n    .replace(/^(NYSE|NASDAQ|AMEX):\\s*/i, '') // remove exchange prefix if any\n    .trim();\n}\n\n// --- Input handling ---\nconst input = items[0]?.json || {};\n// Assuming the symbol/ticker is passed in an earlier node and available here\nconst userSymbol = normalizeSymbol(input.symbol || input.ticker || null);\n\n// --- 1. Attempt to find PRICE ARRAY (Standard Historical Data Format) ---\nlet stockArray =\n  Array.isArray(input.body) ? input.body :\n  Array.isArray(input.data) ? input.data :\n  Array.isArray(input.body?.data) ? input.body.data :\n  Array.isArray(input.result) ? input.result :\n  [];\n\nif (stockArray.length > 0) {\n    // If a price array is found, search within it\n    const match = stockArray.find(item => {\n        const sym = normalizeSymbol(item.symbol || item.ticker || item.code);\n        return sym === userSymbol;\n    });\n\n    if (match) {\n        // Return the matched price data item\n        return [{\n            json: {\n                status: \"✅ Price Data Array Found\",\n                symbol: userSymbol,\n                type: \"PriceHistory\",\n                data: match\n            }\n        }];\n    }\n}\n\n// --- 2. Attempt to find FUNDAMENTAL SUMMARY OBJECT (e.g., Yahoo Finance Quote Summary) ---\nconst summaryData = input.quoteSummary?.result?.[0];\n\nif (summaryData) {\n    // Extract required fundamental objects for a clean output\n    const fundamentalKeys = [\n        'defaultKeyStatistics', \n        'summaryDetail', \n        'financialData',\n        'price', // Price object often contains the current price and symbol\n        'quoteType'\n    ];\n    \n    // Create a clean object containing only the relevant summary parts\n    const cleanData = {};\n    for (const key of fundamentalKeys) {\n        if (summaryData[key]) {\n            cleanData[key] = summaryData[key];\n        }\n    }\n    \n    // Attempt to extract symbol from the summary data (usually inside the 'price' object)\n    const finalSymbol = normalizeSymbol(cleanData.price?.symbol || userSymbol);\n    \n    if (Object.keys(cleanData).length > 0) {\n        return [{\n            json: {\n                status: \"✅ Fundamental Summary Data Found\",\n                symbol: finalSymbol,\n                type: \"QuoteSummary\",\n                data: cleanData\n            }\n        }];\n    }\n}\n\n\n// --- 3. No match found ---\nreturn [{\n    json: {\n        status: \"❌ No relevant stock data found\",\n        message: \"Neither a price history array nor a fundamental summary object was found in the API response.\",\n        receivedKeys: Object.keys(input),\n        userSymbol: userSymbol || \"Unknown Ticker\"\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        704,
        1376
      ],
      "id": "8874fa14-ae59-4f68-a6a9-c7c4387e4328",
      "name": "Code1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an expert financial analyst. Analyze the provided stock data (technical and fundamental analysis). Please analyze the stock **{{ $items(\"GetSYmbol\")[0].json.tradingViewSymbol }}** using the  interval chart. Summarize key trends, support/resistance levels, and indicators in plain text. Provide clean analysis summary response as like that real time analysis. Show in proper formate the text at the end\n",
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1296,
        1280
      ],
      "id": "1c6bc39d-7c50-4a95-889c-9cad6ac22bf6",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {
          "maxRetries": 2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1456,
        1472
      ],
      "id": "06ec91c9-916e-4793-9042-c9c2a1104087",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "bF7jWsgqn389BDRw",
          "name": "OpenAi account 3"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Input: AI response from Gemini node, e.g., $json[\"analysisText\"] or $json[\"text\"]\n// Output: Formatted HTML for frontend display\n\n// Get AI response (replace \"GeminiNode\" with your actual node name)\nconst aiResponse = $json[\"text\"] || $json[\"analysisText\"] || \"\";\n\n// 1️⃣ Extract chart image URL (if markdown format ![alt](url) is present)\nlet chartHTML = '';\nconst chartRegex = /!\\[.*?\\]\\((https?:\\/\\/[^\\s\\)]+)\\)/;\nconst chartMatch = aiResponse.match(chartRegex);\nlet formattedText = aiResponse;\n\nif (chartMatch) {\n    const chartUrl = chartMatch[1];\n    chartHTML = `<img src=\"${chartUrl}\" class=\"chart\" alt=\"Stock Chart\" />`;\n    formattedText = formattedText.replace(chartRegex, '').trim();\n}\n\n// 2️⃣ Format markdown-like bold text **text** → <strong>text</strong>\nformattedText = formattedText.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n\n// 3️⃣ Replace line breaks with <br> for proper HTML formatting\nformattedText = formattedText.replace(/\\n/g, '<br>');\n\n// 4️⃣ Construct final HTML output\nconst htmlOutput = `\n<div class=\"bot-response\">\n  ${formattedText}\n  ${chartHTML || '<br><i>⚠️ No chart image generated.</i>'}\n</div>\n`;\n\n// 5️⃣ Return HTML to frontend\nreturn [{ json: { formattedHTML: htmlOutput } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2640,
        3744
      ],
      "id": "77b00aa0-b7de-40f7-b781-ce92ddccdeea",
      "name": "formated"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.chart-img.com/v2/tradingview/advanced-chart/storage",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer chimg_4IezXyEirX7Fr7rvdREkX2xTDLvBKvxyaxSnb6Ra"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"symbol\": \"={{ 'NYSE:' + $json.symbol }}\",\n  \"type\": \"line\",\n  \"width\": 800,\n  \"height\": 400,\n  \"series\": null\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1232,
        3504
      ],
      "id": "fe1ac2d9-7435-4e07-be8f-a25509a81665",
      "name": "Get Chart",
      "credentials": {
        "httpHeaderAuth": {
          "id": "43WnbUTBjyDzHFWY",
          "name": "Header Auth account"
        },
        "httpBearerAuth": {
          "id": "CBaO5L0msqmk6y6z",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Input symbol from RapidAPI\nlet symbol = $json.symbol; // e.g., \"MLI\"\n\n// Map symbol to its exchange\nconst exchangeMap = {\n  \"AAPL\": \"NASDAQ\",\n  \"MLI\": \"NYSE\",\n  \"MSFT\": \"NASDAQ\"\n  // add more as needed\n};\n\n// Prepend exchange\nconst tradingViewSymbol = (exchangeMap[symbol] || \"NYSE\") + \":\" + symbol;\n\nreturn [{ json: { tradingViewSymbol } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1072,
        1424
      ],
      "id": "8d785c16-1870-4d4c-82ea-e60e17f78376",
      "name": "GetSYmbol"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "stock-analysis",
        "responseMode": "lastNode",
        "options": {}
      },
      "name": "webhookTrigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        64,
        2080
      ],
      "id": "f67e3409-aa61-45ce-b2c6-4ca0eace11a7",
      "webhookId": "f1a81970-d80b-44e7-a783-ae9ec1869cba"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# Extracts trading analysis values from LLM output for chart drawing and trading\nresults = []\n\nfor item in items:\n    input_data = item.get(\"json\", {})\n    \n    try:\n        # 1. Safely read possible text fields from the previous node\n        full_text = (\n            input_data.get(\"text\") or\n            input_data.get(\"data\") or\n            input_data.get(\"body\") or\n            input_data.get(\"message\") or\n            input_data.get(\"content\") or\n            input_data.get(\"result\") or\n            input_data.get(\"output\") or\n            input_data.get(\"response\") or\n            str(input_data)\n        )\n\n        # 2. If text is missing or invalid, return a fallback object\n        if not full_text or not isinstance(full_text, str) or not full_text.strip():\n            results.append({\n                \"json\": {\n                    \"status\": \"No text found\",\n                    \"symbol\": \"N/A\",\n                    \"interval\": \"N/A\",\n                    \"analysisText\": \"N/A\",\n                    \"trend\": \"N/A\",\n                    \"support\": \"N/A\",\n                    \"resistance\": \"N/A\",\n                    \"rsi\": \"N/A\",\n                    \"volume\": \"N/A\",\n                    \"recommendation\": \"N/A\",\n                    \"error\": \"Empty or invalid input text\"\n                }\n            })\n            continue\n\n        import re\n\n        # 3. Extract stock symbol with multiple pattern matching\n        stock_symbol = \"N/A\"\n        \n        # Pattern 1: \"NYSE: PATH\", \"NASDAQ: AAPL\" etc.\n        exchange_match = re.search(r'\\b(NYSE|NASDAQ|AMEX|NSE|BSE|TSX|LSE|FWB):\\s*([A-Za-z.-]{1,10})', full_text, re.IGNORECASE)\n        if exchange_match:\n            stock_symbol = exchange_match.group(2).strip().upper() if exchange_match.group(2) else \"N/A\"\n        \n        # Pattern 2: **AAPL** or *SYMBOL*\n        if stock_symbol == \"N/A\":\n            bold_match = re.search(r'\\*\\*([A-Za-z.-]{1,10})\\*\\*', full_text)\n            if bold_match and bold_match.group(1):\n                stock_symbol = bold_match.group(1).strip().upper()\n        \n        # Pattern 3: Look for \"Symbol: AAPL\" or \"Stock: TSLA\"\n        if stock_symbol == \"N/A\":\n            explicit_match = re.search(r'(?:symbol|stock|ticker)\\s*:?\\s*([A-Za-z.-]{1,10})', full_text, re.IGNORECASE)\n            if explicit_match and explicit_match.group(1):\n                stock_symbol = explicit_match.group(1).strip().upper()\n\n        # 4. Extract interval with improved pattern matching\n        interval = \"N/A\"\n        interval_match = re.search(r'(\\d+\\s*[DHWM]|daily|weekly|monthly|intraday|\\b1D\\b|\\b4H\\b|\\b1H\\b)', full_text, re.IGNORECASE)\n        if interval_match:\n            interval = re.sub(r'Chart|interval|timeframe', '', interval_match.group(0), flags=re.IGNORECASE).strip().upper()\n\n        # 5. Extract TREND information\n        trend = \"N/A\"\n        trend_match = re.search(r'(?:trend|direction).*?(upward|downward|bullish|bearish|sideways|consolidation|neutral)', full_text, re.IGNORECASE)\n        if trend_match:\n            trend = trend_match.group(1).strip().upper()\n\n        # 6. Extract SUPPORT levels\n        support = \"N/A\"\n        support_match = re.search(r'support.*?(\\d+\\.?\\d*)', full_text, re.IGNORECASE)\n        if support_match:\n            support = support_match.group(1)\n        else:\n            # Alternative pattern for support\n            support_alt = re.search(r'support.*?\\$?(\\d+\\.?\\d*)', full_text, re.IGNORECASE)\n            if support_alt:\n                support = support_alt.group(1)\n\n        # 7. Extract RESISTANCE levels\n        resistance = \"N/A\"\n        resistance_match = re.search(r'resistance.*?(\\d+\\.?\\d*)', full_text, re.IGNORECASE)\n        if resistance_match:\n            resistance = resistance_match.group(1)\n        else:\n            # Alternative pattern for resistance\n            resistance_alt = re.search(r'resistance.*?\\$?(\\d+\\.?\\d*)', full_text, re.IGNORECASE)\n            if resistance_alt:\n                resistance = resistance_alt.group(1)\n\n        # 8. Extract RSI values\n        rsi = \"N/A\"\n        rsi_match = re.search(r'RSI.*?(\\d+\\.?\\d*)', full_text, re.IGNORECASE)\n        if rsi_match:\n            rsi = rsi_match.group(1)\n\n        # 9. Extract VOLUME analysis\n        volume = \"N/A\"\n        volume_match = re.search(r'volume.*?(high|low|average|above|below|increasing|decreasing)', full_text, re.IGNORECASE)\n        if volume_match:\n            volume = volume_match.group(1).strip().upper()\n\n        # 10. Extract TRADING RECOMMENDATION\n        recommendation = \"N/A\"\n        rec_match = re.search(r'(buy|sell|hold|strong buy|strong sell|accumulate|reduce)', full_text, re.IGNORECASE)\n        if rec_match:\n            recommendation = rec_match.group(1).strip().upper()\n\n        # 11. Clean and truncate the analysis text for better readability\n        analysis_text = full_text.strip()\n        \n        # Remove excessive whitespace and line breaks\n        analysis_text = re.sub(r'\\s+', ' ', analysis_text)\n        analysis_text = re.sub(r'\\n\\s*\\n', '\\n\\n', analysis_text)\n        \n        # Optional: Truncate very long texts to prevent issues\n        if len(analysis_text) > 8000:\n            analysis_text = analysis_text[:8000] + \"... [truncated]\"\n\n        # 12. Append structured trading analysis object to results array\n        results.append({\n            \"json\": {\n                \"symbol\": stock_symbol,\n                \"interval\": interval,\n                \"analysisText\": analysis_text,\n                \"trend\": trend,\n                \"support\": support,\n                \"resistance\": resistance,\n                \"rsi\": rsi,\n                \"volume\": volume,\n                \"recommendation\": recommendation,\n                \"status\": \"success\",\n                \"timestamp\": __import__('datetime').datetime.now().isoformat()\n            }\n        })\n\n    except Exception as error:\n        # 13. Handle any unexpected errors gracefully\n        results.append({\n            \"json\": {\n                \"status\": \"error\",\n                \"symbol\": \"N/A\",\n                \"interval\": \"N/A\",\n                \"analysisText\": \"N/A\",\n                \"trend\": \"N/A\",\n                \"support\": \"N/A\",\n                \"resistance\": \"N/A\",\n                \"rsi\": \"N/A\",\n                \"volume\": \"N/A\",\n                \"recommendation\": \"N/A\",\n                \"error\": str(error)\n            }\n        })\n\n# 14. Return the final array of JSON objects (required by n8n)\nreturn results"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1312,
        1888
      ],
      "id": "3ca20177-878e-4809-82db-5fbc1031879a",
      "name": "Extract values for analysis"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import matplotlib\nmatplotlib.use(\"Agg\")\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport numpy as np\nimport base64\nfrom io import BytesIO\nfrom datetime import datetime, timedelta\nimport json\n\n# --- Theme Colors (Defined by User) ---\nBG = \"#0f172a\"\nGRID = \"#334155\"\nTEXT = \"#f1f5f9\"\nCANDLE_UP = \"#10b981\"\nCANDLE_DOWN = \"#ef4444\"\nWICK_COLOR = \"#94a3b8\"\nVOLUME_COLOR = \"#475569\"\nRSI_COLOR = \"#f59e0b\"\nSUPPORT_COLOR = \"#10b981\"\nRESISTANCE_COLOR = \"#ef4444\"\n# --------------------------------------\n\nresults = []\n\n# --- Helper Function for Safe Float Conversion ---\ndef safe_float(value, default_val=None):\n    \"\"\"Converts value to float, handling strings like 'N/A' or 'None'.\"\"\"\n    if isinstance(value, (int, float)):\n        return float(value)\n    if isinstance(value, str):\n        clean_value = value.strip().replace('$', '').replace(',', '')\n        if clean_value.upper() in ('N/A', 'NONE', 'NULL', ''):\n            return default_val\n        try:\n            return float(clean_value)\n        except ValueError:\n            return default_val\n    return default_val\n\n# --- Main Logic ---\nfor item in items:\n    try:\n        data = item.get(\"json\", {})\n        \n        if not data:\n            raise ValueError(\"Input JSON data is empty or malformed.\")\n\n        # --- SAFELY EXTRACT AND CONVERT DATA ---\n        symbol = data.get(\"symbol\", \"AAPL\").upper() # Ensure symbol is uppercase\n        interval = data.get(\"interval\", \"1D\")\n        trend = data.get(\"trend\", \"Bullish\")\n        \n        default_price = 180.0 \n        \n        support = safe_float(data.get(\"support\", default_price), default_price)\n        resistance = safe_float(data.get(\"resistance\", default_price), default_price)\n        rsi_val = safe_float(data.get(\"rsi\", 55), 55)\n        # Using a default volume if not provided, or a generic simulation if actual data is not flowing\n        volume_val = safe_float(data.get(\"volume\", 3000000), 3000000) \n        recommendation = data.get(\"recommendation\", \"Buy\")\n        \n        plot_sr = support != default_price and resistance != default_price # Only plot if both are actual values\n\n        # --- Generate Simulated OHLCV Data (Essential for Charting) ---\n        days = 60\n        base_date = datetime.now() - timedelta(days=days) # Start date earlier for better display\n        dates = [base_date + timedelta(days=i) for i in range(days)]\n        dates_num = mdates.date2num(dates)\n\n        base_price_sim = (support + resistance) / 2 if plot_sr and support != resistance else default_price\n        \n        # Adjust base_price_sim to be around the support/resistance if they are valid, else use default_price\n        if plot_sr and support is not None and resistance is not None:\n            base_price_sim = (support + resistance) / 2\n        else:\n            base_price_sim = default_price \n\n        drift = 0.4 if \"bullish\" in trend.lower() else (-0.4 if \"bearish\" in trend.lower() else 0.0)\n        \n        prices_sim = [base_price_sim]\n        for _ in range(1, days):\n            prices_sim.append(prices_sim[-1] + np.random.normal(drift, 1.2))\n\n        prices_sim = np.array(prices_sim)\n        high_sim = prices_sim + np.random.uniform(0.5, 1.5, days)\n        low_sim = prices_sim - np.random.uniform(0.5, 1.5, days)\n        open_sim = prices_sim + np.random.uniform(-1, 1, days)\n        close_sim = prices_sim + np.random.uniform(-1, 1, days)\n        volume_sim = np.random.randint(1000000, 6000000, days) # Use simulated volume\n\n        # --- Create Figure Layout (3 Subplots) ---\n        fig = plt.figure(figsize=(12, 10))\n        fig.set_facecolor(BG)\n\n        gs = fig.add_gridspec(3, 1, height_ratios=[4, 1, 1.5], hspace=0)\n\n        ax_price = fig.add_subplot(gs[0])\n        ax_vol = fig.add_subplot(gs[1], sharex=ax_price)\n        ax_rsi = fig.add_subplot(gs[2], sharex=ax_price)\n\n        plt.setp(ax_price.get_xticklabels(), visible=False)\n        plt.setp(ax_vol.get_xticklabels(), visible=False)\n        \n        # --- 1. PRICE CHART (Candlesticks, S/R) ---\n        \n        ax_price.set_facecolor(BG)\n        CANDLE_WIDTH = 0.6\n        \n        for i, (o, h, l, c) in enumerate(zip(open_sim, high_sim, low_sim, close_sim)):\n            bar_center = dates_num[i]\n            color = CANDLE_UP if c >= o else CANDLE_DOWN\n            \n            # Wicks\n            ax_price.plot([bar_center, bar_center], [l, h], color=WICK_COLOR, linewidth=1)\n            \n            # Body\n            ax_price.add_patch(plt.Rectangle(\n                (bar_center - CANDLE_WIDTH / 2, min(o, c)),\n                CANDLE_WIDTH, abs(c - o), \n                facecolor=color, edgecolor=color, linewidth=0.5\n            ))\n\n        # Support / Resistance Lines (Only plot if they are NOT the fallback price and are distinct)\n        if plot_sr and support is not None and resistance is not None and support != resistance:\n             ax_price.axhline(support, color=SUPPORT_COLOR, ls=\"--\", lw=1.5, label=f\"Support ${support:.2f}\")\n             ax_price.axhline(resistance, color=RESISTANCE_COLOR, ls=\"--\", lw=1.5, label=f\"Resistance ${resistance:.2f}\")\n\n        # Styling\n        # ax_price.set_title(f\"{symbol} Stock Analysis ({interval})\", color=TEXT, fontsize=16, fontweight=\"bold\") # Removed for fig.text\n        ax_price.set_ylabel(\"Price ($)\", color=TEXT)\n        ax_price.tick_params(colors=TEXT)\n        ax_price.grid(True, color=GRID, ls=\"-\", alpha=0.4)\n        ax_price.legend(frameon=False, loc=\"upper left\", labelcolor=TEXT)\n        ax_price.xaxis.grid(False)\n        \n        # --- 2. VOLUME CHART (ax_vol) ---\n        \n        ax_vol.set_facecolor(BG)\n        ax_vol.bar(dates_num, volume_sim, color=VOLUME_COLOR, alpha=0.6, width=CANDLE_WIDTH * 1.1)\n        \n        # Styling\n        ax_vol.set_ylabel(\"Volume\", color=TEXT, fontsize=10)\n        ax_vol.tick_params(colors=TEXT, axis='y')\n        ax_vol.tick_params(axis='x', bottom=False)\n        ax_vol.grid(True, color=GRID, ls=\"-\", alpha=0.4, axis='y')\n        ax_vol.spines['top'].set_visible(False)\n        \n        # --- 3. RSI CHART (ax_rsi) ---\n        \n        ax_rsi.set_facecolor(BG)\n        rsi_base = np.full(days, 50.0)\n        rsi_simulated = rsi_base + np.sin(np.linspace(0, 4*np.pi, days)) * 8\n        rsi_simulated[-5:] = np.linspace(rsi_simulated[-5], rsi_val, 5) # End close to input RSI\n\n        ax_rsi.plot(dates_num, rsi_simulated, color=RSI_COLOR, lw=1.8, label=f'RSI ({rsi_val:.1f})')\n        \n        # Overbought (70) and Oversold (30) lines\n        ax_rsi.axhline(70, color=RESISTANCE_COLOR, ls=\":\", lw=1)\n        ax_rsi.axhline(30, color=SUPPORT_COLOR, ls=\":\", lw=1)\n        ax_rsi.set_ylim(20, 80)\n        ax_rsi.set_ylabel(\"RSI\", color=TEXT, fontsize=10)\n        ax_rsi.tick_params(colors=TEXT)\n        ax_rsi.grid(True, color=GRID, ls=\"-\", alpha=0.4, axis='y')\n        \n        # Format X-axis\n        ax_rsi.xaxis.set_major_formatter(mdates.DateFormatter(\"%b %d\"))\n        ax_rsi.xaxis.set_major_locator(mdates.WeekdayLocator(interval=2))\n        fig.autofmt_xdate(rotation=30)\n\n        # --- 4. OVERALL TITLE AND INFO TEXT ---\n        # Main symbol title\n        fig.text(0.5, 0.96, f\"{symbol}\", \n                 color=TEXT, fontsize=24, fontweight='bold', ha='center', va='top')\n        \n        # Sub-title / Interval\n        fig.text(0.5, 0.93, f\"Stock Analysis ({interval})\", \n                 color=TEXT, fontsize=14, ha='center', va='top')\n\n        # Recommendation and Trend below the main title\n        fig.text(0.12, 0.89, f\"Recommendation: {recommendation.upper()} | Current Trend: {trend}\",\n                 color=TEXT, fontsize=11, fontweight='semibold')\n\n\n        # --- 5. ENCODE IMAGE TO BASE64 ---\n        buf = BytesIO()\n        plt.savefig(buf, format=\"png\", dpi=120, bbox_inches=\"tight\", facecolor=BG) # Ensure background is saved\n        buf.seek(0)\n        image_b64 = base64.b64encode(buf.getvalue()).decode(\"utf-8\")\n        plt.close(fig)\n\n        # --- 6. PREPARE RESULT ---\n        results.append({\n            \"json\": {\n                \"symbol\": symbol,\n                \"interval\": interval,\n                \"trend\": trend,\n                # Ensure support/resistance are actual floats or None for consistent output\n                \"support\": support if support != default_price else None, \n                \"resistance\": resistance if resistance != default_price else None,\n                \"rsi\": rsi_val,\n                \"recommendation\": recommendation,\n                \"chartImageURI\": f\"data:image/png;base64,{image_b64}\", \n                \"status\": \"Advanced 3-Panel Candlestick chart generated successfully\"\n            }\n        })\n\n    except Exception as e:\n        results.append({\n            \"json\": {\"status\": \"Error\", \"error\": str(e), \"message\": \"Failed to generate chart. Check input data: \" + str(e)}\n        })\n\nreturn results"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1632,
        1888
      ],
      "id": "871742ef-bd76-4f8b-af3d-405ea48fce13",
      "name": "Draw Chart"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=give an analysis values from this {{ $json.analysisText }} which helps to trader for easily understand analysis.Give only important values. remove ** from the text. give an formated anlaysis text view like word text.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        960,
        3184
      ],
      "id": "8849a282-1458-4df0-aea4-a75d0e9326f0",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {
          "maxRetries": 2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1008,
        3456
      ],
      "id": "40f38fc3-89db-424c-9d19-22771755cc65",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "bF7jWsgqn389BDRw",
          "name": "OpenAi account 3"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2032,
        2048
      ],
      "id": "36e5053a-0db2-4e71-9726-0fa6c0064920",
      "name": "Merge",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a highly experienced Financial Analyst and Trading Strategist.\n\nYour task is to provide a concise, professional, and **immediately actionable** combined analysis for the stock with the ticker **{{ $('Code').item.json.symbol }}**.\n\n---\n## DATA INPUT\nUse the following data inputs for your analysis. Note that some technical data may be estimated or unavailable.\n\n**Fundamental/Profile Data:**\n- Sector: {{ $json.sector || 'Technology' }}\n- Industry: {{ $json.industry || 'Software' }}\n- Business Summary: {{ $json.longBusinessSummary || 'N/A' }} \n\n**Technical Indicators (from other workflow nodes):**\n- RSI: {{ $json.rsi || '55 (Neutral)' }}\n- Key Support Level: ${{ $json.support || 'N/A' }}\n- Key Resistance Level: ${{ $json.resistance || 'N/A' }}\n- Time Interval: {{ $json.interval || 'Daily' }}\n---\n\n## ANALYSIS INSTRUCTIONS\n\n1.  **Fundamental Outlook (1-2 sentences):** Based on the Sector, Industry, and Business Summary, briefly describe the company's market position and long-term potential.\n2.  **Technical Trend (1 sentence):** Based on the RSI and the price context (or the general market trend if price data is unavailable), describe the current short-term trend (Bullish, Bearish, or Consolidating).\n3.  **Key Levels & Risk (1 sentence):** Discuss the significance of the provided Support and Resistance levels (if available). If not available, discuss the potential risk related to the current industry or sector.\n4.  **Overall Recommendation (1 sentence):** Conclude with a clear, direct recommendation: **BUY, SELL, or HOLD**.\n5.  **Actionable Trade Action (1 sentence):** Based on the recommendation, suggest a specific trade action: **\"Initiate position upon confirmation of the trend\"** OR **\"Exit position if market conditions worsen\"** OR **\"Maintain current position and monitor volatility.\"**\n\nFormat your response using bold Markdown, focusing only on the analysis, without any conversational preamble. **Start immediately with the title: **Comprehensive Stock Analysis for {{ $('Code').item.json.symbol }}***",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        912,
        2080
      ],
      "id": "586d0cc7-474a-4f01-b116-795f46ccd49d",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        800,
        2288
      ],
      "id": "f9ce8709-153c-476f-a014-6f7ee183acc8",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "bF7jWsgqn389BDRw",
          "name": "OpenAi account 3"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v4/get-statistics?symbol={{ $json.symbol }}&region=US&lang=en-US",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-RapidAPI-Key",
              "value": "3d8a9705c1msh93d64cd9ff64f57p186482jsnb92e7075a175"
            },
            {
              "name": "X-RapidAPI-Host",
              "value": "apidojo-yahoo-finance-v1.p.rapidapi.com"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        464,
        1408
      ],
      "id": "cc5a81e9-8f3a-4fe7-a8f2-b000b8976840",
      "name": "Get rapidapi Price data",
      "credentials": {
        "httpHeaderAuth": {
          "id": "EkBKiVMJfUItk046",
          "name": "Header Auth account 4"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://yahoo-finance15.p.rapidapi.com/api/v1/markets/stock/modules?ticker={{ $json.symbol }}&module=asset-profile",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-RapidAPI-Key",
              "value": "3d8a9705c1msh93d64cd9ff64f57p186482jsnb92e7075a175"
            },
            {
              "name": "X-RapidAPI-Host",
              "value": "yahoo-finance15.p.rapidapi.com"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        592,
        2080
      ],
      "id": "414be868-c3fb-4aff-8b50-05d53c189bca",
      "name": "Get rapidapi Price data1",
      "credentials": {
        "httpHeaderAuth": {
          "id": "EkBKiVMJfUItk046",
          "name": "Header Auth account 4"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Code').item.json.symbol }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1008,
        2288
      ],
      "id": "3b9bf810-b917-41ac-bdaa-40543edb4098",
      "name": "Simple Memory"
    }
  ],
  "pinData": {},
  "connections": {
    "4. Format Output": {
      "main": [
        []
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Get rapidapi Price data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        []
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        []
      ]
    },
    "formated": {
      "main": [
        []
      ]
    },
    "Get Chart": {
      "main": [
        []
      ]
    },
    "GetSYmbol": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "webhookTrigger": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract values for analysis": {
      "main": [
        [
          {
            "node": "Draw Chart",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Draw Chart": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        []
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "5. Respond to Website",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Extract values for analysis",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get rapidapi Price data": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get rapidapi Price data1": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4c3b28c7-9067-4220-a9aa-3fb3a0875633",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "88c8173ddbb3a13d7e35dbbc3de554b5e4f9d59134c6d8755d99bb45262454fc"
  },
  "id": "sCzJ6yyOHNuWhC4Q",
  "tags": []
}